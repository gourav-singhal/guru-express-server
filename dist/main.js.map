{"version":3,"sources":["../src/main.js"],"names":["app","databaseLoader","configLoader","modelLoader","middlewareLoader","jsonLoader","resolverLoader","routeLoader","schemaLoader","context","config","default","resolvers","connectors","routesContext","databases","locals","database","json","models","routes","schema","console","log","main"],"mappings":";;;;;;;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;2cARA;;;;;uDAUe;AAAA,QAAuBA,GAAvB,SAAuBA,GAAvB;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAWD,uBAXC;;AAAA;AAAA;AAGTC,0BAHS,SAGTA,cAHS;AAITC,wBAJS,SAITA,YAJS;AAKTC,uBALS,SAKTA,WALS;AAMTC,4BANS,SAMTA,gBANS;AAOTC,sBAPS,SAOTA,UAPS;AAQTC,0BARS,SAQTA,cARS;AASTC,uBATS,SASTA,WATS;AAUTC,wBAVS,SAUTA,YAVS;;;AAaX;AACMC,mBAdK,GAcK,EAdL;;AAgBX;;AACA,uCAAY,EAAET,QAAF,EAAOU,QAAQR,YAAf,EAAZ;;AAEA;AACA,2CAAW;AACTF,sBADS;AAETI,gCAAkBA,iBAAiBO;AAF1B,aAAX;;AAKA;AACMC,qBA1BK,GA0BON,eAAeM,SA1BtB;AA2BLC,sBA3BK,GA2BQP,eAAeO,UA3BvB;;AA6BX;;AACMC,yBA9BK;AA+BTD,oCA/BS;AAgCTE,yBAAW,wBAAoB;AAC7BA,2BAAWd,cADkB;AAE7BS,wBAAQV,IAAIgB,MAAJ,CAAWC;AAFU,eAApB,CAhCF;AAoCTC,oBAAMb,UApCG;AAqCTW,sBAAQhB,IAAIgB,MArCH;AAsCTG,sBAAQhB;AAtCC,eAuCNM,OAvCM;;;AA0CX,kCAAO;AACLT,sBADK;AAELS,uBAASK,aAFJ;AAGLF,kCAHK;AAILQ,sBAAQ;AAAA,uBAAMb,uBAAcP,QAAd,IAAsBc,aAAtB,EAAN;AAAA,eAJH;AAKLO,sBAAQb;AALH,aAAP;AA1CW;AAAA;;AAAA;AAAA;AAAA;;AAkDXc,oBAAQC,GAAR;;AAlDW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeC,I;;;;SAAAA,I","file":"main.js","sourcesContent":["/*\n* Main app \n*/\n\nimport environment from './environment';\nimport routes from './routes';\nimport loader from '@graphql-guru/loader';\nimport databaseConnections from './database';\nimport middleware from './middleware/index-middleware';\n\nexport default async function main ({ app }) {\n  try {\n    const {\n      databaseLoader,\n      configLoader,\n      modelLoader,\n      middlewareLoader,\n      jsonLoader,\n      resolverLoader,\n      routeLoader,\n      schemaLoader\n    } = await loader();\n\n    // user defined context\n    const context = {};\n\n    // load environment variables\n    environment({ app, config: configLoader });\n\n    // load middleware\n    middleware({\n      app,\n      middlewareLoader: middlewareLoader.default\n    });\n\n    // load resolvers\n    const resolvers = resolverLoader.resolvers;\n    const connectors = resolverLoader.connectors;\n\n    // create route context\n    const routesContext = {\n      connectors,\n      databases: databaseConnections({\n        databases: databaseLoader,\n        config: app.locals.database\n      }),\n      json: jsonLoader,\n      locals: app.locals,\n      models: modelLoader,\n      ...context\n    };\n\n    routes({\n      app,\n      context: routesContext,\n      resolvers,\n      routes: () => routeLoader({ app, ...routesContext }),\n      schema: schemaLoader\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n"]}