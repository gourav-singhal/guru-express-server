{"version":3,"sources":["../src/main.js"],"names":["app","databaseLoader","configLoader","middlewareLoader","modelLoader","resolverLoader","routeLoader","schemaLoader","context","config","default","resolvers","connectors","routesContext","databases","locals","database","models","routes","schema","console","log","main"],"mappings":";;;;;;;;AAIA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;2cATA;;;;AAOA;;;;uDAIe;AAAA,QAAuBA,GAAvB,SAAuBA,GAAvB;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAUD,uBAVC;;AAAA;AAAA;AAGTC,0BAHS,SAGTA,cAHS;AAITC,wBAJS,SAITA,YAJS;AAKTC,4BALS,SAKTA,gBALS;AAMTC,uBANS,SAMTA,WANS;AAOTC,0BAPS,SAOTA,cAPS;AAQTC,uBARS,SAQTA,WARS;AASTC,wBATS,SASTA,YATS;;;AAYX;AACMC,mBAbK,GAaK,EAbL;;AAeX;;AACA,uCAAY,EAAER,QAAF,EAAOS,QAAQP,YAAf,EAAZ;;AAEA;AACA,2CAAW;AACTF,sBADS;AAETG,gCAAkBA,iBAAiBO;AAF1B,aAAX;;AAKA;AACMC,qBAzBK,GAyBON,eAAeM,SAzBtB;AA0BLC,sBA1BK,GA0BQP,eAAeO,UA1BvB;;AA4BX;;AACMC,yBA7BK;AA8BTD,oCA9BS;AA+BTE,yBAAW,wBAAoB;AAC7BA,2BAAWb,cADkB;AAE7BQ,wBAAQT,IAAIe,MAAJ,CAAWC;AAFU,eAApB,CA/BF;AAmCTD,sBAAQf,IAAIe;AAnCH,eAoCNP,OApCM;;;AAuCX,kCAAO;AACLR,sBADK;AAELQ,uBAASK,aAFJ;AAGLI,sBAAQb,WAHH;AAILO,kCAJK;AAKLO,sBAAQ;AAAA,uBAAMZ,uBAAcN,QAAd,IAAsBa,aAAtB,EAAN;AAAA,eALH;AAMLM,sBAAQZ;AANH,aAAP;AAvCW;AAAA;;AAAA;AAAA;AAAA;;AAgDXa,oBAAQC,GAAR;;AAhDW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeC,I;;;;SAAAA,I","file":"main.js","sourcesContent":["/*\n* Main app \n*/\n\nimport environment from './environment';\nimport routes from './routes';\nimport loader from '@guru/loader';\n// import loader from '../../loaders/dist/index-loader';\nimport databaseConnections from './database';\nimport middleware from './middleware/index-middleware';\n\nexport default async function main ({ app }) {\n  try {\n    const {\n      databaseLoader,\n      configLoader,\n      middlewareLoader,\n      modelLoader,\n      resolverLoader,\n      routeLoader,\n      schemaLoader\n    } = await loader();\n\n    // user defined context\n    const context = {};\n\n    // load environment variables\n    environment({ app, config: configLoader });\n\n    // load middleware\n    middleware({\n      app,\n      middlewareLoader: middlewareLoader.default\n    });\n\n    // load resolvers\n    const resolvers = resolverLoader.resolvers;\n    const connectors = resolverLoader.connectors;\n\n    // load schema definitions\n    const routesContext = {\n      connectors,\n      databases: databaseConnections({\n        databases: databaseLoader,\n        config: app.locals.database\n      }),\n      locals: app.locals,\n      ...context\n    };\n\n    routes({\n      app,\n      context: routesContext,\n      models: modelLoader,\n      resolvers,\n      routes: () => routeLoader({ app, ...routesContext }),\n      schema: schemaLoader\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n"]}