{"version":3,"sources":["../../src/routes/graphql-route.js"],"names":["graphqlRoute","app","context","schema","resolvers","routes","logger","log","console","e","parsePersistedQuery","req","res","next","dir","whitelist","Array","isArray","body","map","item","id","queryDoc","readFileSync","fragments","fragmentDoc","fragment","JSON","parse","query","join","operationName","variables","stringify","status","json","errors","use","process","cwd","typeDefs","ast","cache"],"mappings":"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","file":"graphql-route.js","sourcesContent":["/*\n* GraphQL rourte\n*/\n\n'use strict';\n\nimport { graphqlExpress } from 'graphql-server-express';\nimport { makeExecutableSchema } from 'graphql-tools';\nimport { parse } from 'graphql';\nimport Cache from './cache-route';\nimport fs from 'fs';\nimport { capitalize } from '../utils';\nimport { mergeStrings } from 'gql-merge';\n\nexport default function graphqlRoute ({\n  app,\n  context,\n  schema,\n  resolvers,\n  routes\n}) {\n  const logger = { log: e => console.log(e) };\n\n  function parsePersistedQuery ({ req, res, next, dir, whitelist }) {\n    if (Array.isArray(req.body) && req.body[0]) {\n      req.body = [...req.body].map(item => {\n        if (item.id) {\n          const queryDoc = fs.readFileSync(\n            `${dir}${item.id}-query.json`,\n            'utf8'\n          );\n\n          const fragments = item.fragments\n            ? item.fragments.map(fragment => {\n              const fragmentDoc = fs.readFileSync(\n                  `${dir}${fragment}-query.json`,\n                  'utf8'\n                );\n\n              return JSON.parse(fragmentDoc).query;\n            })\n            : [];\n\n          return {\n            query: `${JSON.parse(queryDoc).query} ${fragments.join('\\n\\n')}`,\n            operationName: item.operationName || null,\n            variables: JSON.stringify(item.variables)\n          };\n        } else {\n          if (whitelist) {\n            console.log('The request is not a persisted query');\n            return res.status(400).json({\n              errors: 'Invalid request'\n            });\n          } else {\n            return item;\n          }\n        }\n      });\n\n      next();\n    } else {\n      if (whitelist) {\n        console.log('The request is not a persisted query');\n        res.status('400').json({\n          errors: 'Invalid request'\n        });\n      } else {\n        next();\n      }\n    }\n  }\n\n  // function validateQueryOperation (req, res, next) {\n  //   const queryAst = parse(req.body.query);\n\n  //   queryAst.definitions.forEach(definition => {\n  //     const operation = definition.operation;\n  //     if (operation === 'mutation' || operation === 'query') {\n  //       definition.selectionSet.selections.forEach(selection => {\n  //         const result = schema.definition.operations[\n  //           capitalize(operation)\n  //         ].filter(item => item.name === selection.name.value);\n\n  //         if (result.length === 0) {\n  //           console.log(\n  //             `Operation ${selection.name.value} does not exist in schema${operation}`\n  //           );\n  //           res.status('400').json({\n  //             errors: 'Invalid request'\n  //           });\n  //         } else {\n  //           next();\n  //         }\n  //       });\n  //     } else {\n  //       next();\n  //     }\n  //   });\n  // }\n\n  app.use('/graphql', (req, res, next) => {\n    parsePersistedQuery({\n      req,\n      res,\n      next,\n      dir: `${process.cwd()}/server/queries/`,\n      whitelist: false\n    });\n  });\n\n  // app.use('/graphql', validateQueryOperation);\n\n  app.use(\n    '/graphql',\n    graphqlExpress(req => {\n      return {\n        schema: makeExecutableSchema({\n          typeDefs: schema.ast,\n          resolvers,\n          logger\n        }),\n        context: {\n          ...context,\n          cache: new Cache(),\n          req\n        }\n      };\n    })\n  );\n}\n"]}