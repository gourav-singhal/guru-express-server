{"version":3,"sources":["../../src/routes/graphql-route.js"],"names":["graphqlRoute","app","context","schema","resolvers","routes","logger","log","console","e","parsePersistedQuery","req","res","next","dir","whitelist","query","body","variables","Array","isArray","map","item","id","file","existsSync","queryDoc","readFileSync","itemVariables","vars","JSON","parse","operationName","stringify","status","json","errors","use","process","cwd","typeDefs","ast","cache"],"mappings":"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","file":"graphql-route.js","sourcesContent":["/*\n* GraphQL rourte\n*/\n\n'use strict';\n\nimport { graphqlExpress } from 'graphql-server-express';\nimport { makeExecutableSchema } from 'graphql-tools';\nimport { parse } from 'graphql';\nimport Cache from './cache-route';\nimport fs from 'fs';\nimport { capitalize } from '../utils';\nimport { mergeStrings } from 'gql-merge';\n\nexport default function graphqlRoute ({\n  app,\n  context,\n  schema,\n  resolvers,\n  routes\n}) {\n  const logger = { log: e => console.log(e) };\n\n  function parsePersistedQuery ({ req, res, next, dir, whitelist }) {\n    const query = req.body.query;\n    const variables = req.body.variables || '{}';\n\n    if (Array.isArray(query) && query[0]) {\n      req.body = [...query].map(item => {\n        if (item.id) {\n          const file = `${dir}${item.id}-query.json`;\n          if (fs.existsSync(file)) {\n            const queryDoc = fs.readFileSync(file, 'utf8');\n            const itemVariables = item.variables ? item.variables : {};\n\n            const vars = {\n              ...JSON.parse(variables),\n              ...itemVariables\n            };\n\n            return {\n              query: JSON.parse(queryDoc).query,\n              operationName: item.operationName || null,\n              variables: JSON.stringify(vars)\n            };\n          } else {\n            console.log('The persisted query file not found');\n            return res.status(400).json({\n              errors: 'Invalid request'\n            });\n          }\n\n        } else {\n          if (whitelist) {\n            console.log('The request is not a persisted query');\n            return res.status(400).json({\n              errors: 'Invalid request'\n            });\n          } else {\n            return item;\n          }\n        }\n      });\n\n      next();\n    } else {\n      if (whitelist) {\n        console.log('The request is not a persisted query');\n        res.status('400').json({\n          errors: 'Invalid request'\n        });\n      } else {\n        next();\n      }\n    }\n  }\n\n  // function validateQueryOperation (req, res, next) {\n  //   const queryAst = parse(req.body.query);\n\n  //   queryAst.definitions.forEach(definition => {\n  //     const operation = definition.operation;\n  //     if (operation === 'mutation' || operation === 'query') {\n  //       definition.selectionSet.selections.forEach(selection => {\n  //         const result = schema.definition.operations[\n  //           capitalize(operation)\n  //         ].filter(item => item.name === selection.name.value);\n\n  //         if (result.length === 0) {\n  //           console.log(\n  //             `Operation ${selection.name.value} does not exist in schema${operation}`\n  //           );\n  //           res.status('400').json({\n  //             errors: 'Invalid request'\n  //           });\n  //         } else {\n  //           next();\n  //         }\n  //       });\n  //     } else {\n  //       next();\n  //     }\n  //   });\n  // }\n\n  // app.use('/graphql', validateQueryOperation);\n\n  app.use(\n    '/graphql',\n    (req, res, next) => {\n      parsePersistedQuery({\n        req,\n        res,\n        next,\n        dir: `${process.cwd()}/server/queries/`,\n        whitelist: false\n      });\n    },\n    graphqlExpress(req => {\n      return {\n        schema: makeExecutableSchema({\n          typeDefs: schema.ast,\n          resolvers,\n          logger\n        }),\n        context: {\n          ...context,\n          cache: new Cache(),\n          req\n        }\n      };\n    })\n  );\n}\n"]}