{"version":3,"sources":["../../../../../src/modules/ide/ide-persisted/resolver/resolverMutation-ide-persisted.js"],"names":["rm","fs","promisifyAll","require","idePersistedCollectionClear","obj","args","context","idePersistedCreate","data","created","Date","toISOString","writeFileAsync","id","JSON","stringify","then","RESULTS_","result","catch","console","log","error","type","message","idePersistedRemove","idePersistedHistoryClear","db","set","history","write","idePersistedHistorySave","defaults","get","push"],"mappings":"AAAA;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;IAEQA,E,qBAAAA,E;;AACR,IAAMC,KAAK,mBAASC,YAAT,CAAsBC,QAAQ,IAAR,CAAtB,CAAX;;kBAEe;AACbC,6BADa,uCACgBC,GADhB,EACqBC,IADrB,EAC2BC,OAD3B,EACoC;AAC/CP,OAAG,IAAH;AACD,GAHY;AAKbQ,oBALa,8BAKOH,GALP,EAKYC,IALZ,EAKkBC,OALlB,EAK2B;AACtC,QAAME,oBACDH,IADC;AAEJI,eAAS,IAAIC,IAAJ,GAAWC,WAAX;AAFL,MAAN;;AAKA,WAAOX,GACJY,cADI,wCAEuBP,KAAKQ,EAF5B,sBAGHC,KAAKC,SAAL,CAAeP,IAAf,CAHG,EAKJQ,IALI,CAKC,YAAM;AACV,aAAO;AACLC,kBAAU;AACRC,kBAAQ;AADA;AADL,OAAP;AAKD,KAXI,EAYJC,KAZI,CAYE,iBAAS;AACdC,cAAQC,GAAR,CAAYC,KAAZ;;AAEA,aAAO;AACLL,kBAAU;AACRC,kBAAQ,IADA;AAERI,iBAAO;AACLC,kBAAM,kBADD;AAELC,qBAAS;AAFJ;AAFC;AADL,OAAP;AASD,KAxBI,CAAP;AAyBD,GApCY;AAsCbC,oBAtCa,8BAsCOrB,GAtCP,EAsCYC,IAtCZ,EAsCkBC,OAtClB,EAsC2B,CAAE,CAtC7B;AAwCboB,0BAxCa,oCAwCatB,GAxCb,EAwCkBC,IAxClB,EAwCwBC,OAxCxB,EAwCiC;AAC5C,QAAMqB,KAAK,uDAAX;AACAA,OAAGC,GAAH,CAAO,EAAEC,SAAS,EAAX,EAAP,EAAwBC,KAAxB;;AAEA9B,OAAGY,cAAH,oCAA0C,wBAA1C;AACA,WAAO,EAAP;AACD,GA9CY;AAgDbmB,yBAhDa,mCAgDY3B,GAhDZ,EAgDiBC,IAhDjB,EAgDuBC,OAhDvB,EAgDgC;AAC3C,QAAMqB,KAAK,uDAAX;;AAEAA,OAAGK,QAAH,CAAY,EAAEH,SAAS,EAAX,EAAZ,EAA6BC,KAA7B;AACAH,OAAGM,GAAH,CAAO,SAAP,EAAkBC,IAAlB,CAAuB7B,IAAvB,EAA6ByB,KAA7B;AACD;AArDY,C","file":"resolverMutation-ide-persisted.js","sourcesContent":["'use strict';\n\nimport Bluebird from 'bluebird';\nimport shell from 'shelljs';\nimport low from 'lowdb';\nimport { PERSISTED_DIRECTORY, PERSISTED_HISTORY_FILE } from '../../../constants';\n\nconst { rm } = shell;\nconst fs = Bluebird.promisifyAll(require('fs'));\n\nexport default {\n  idePersistedCollectionClear (obj, args, context) {\n    rm('-r', PERSISTED_DIRECTORY);\n  },\n\n  idePersistedCreate (obj, args, context) {\n    const data = {\n      ...args,\n      created: new Date().toISOString()\n    };\n\n    return fs\n      .writeFileAsync(\n        `${PERSISTED_DIRECTORY}/${args.id}-persisted.json`,\n        JSON.stringify(data)\n      )\n      .then(() => {\n        return {\n          RESULTS_: {\n            result: 'ok'\n          }\n        };\n      })\n      .catch(error => {\n        console.log(error);\n\n        return {\n          RESULTS_: {\n            result: 'ok',\n            error: {\n              type: 'QUERY_SAVE_ERROR',\n              message: 'Persisted did not save'\n            }\n          }\n        };\n      });\n  },\n\n  idePersistedRemove (obj, args, context) {},\n\n  idePersistedHistoryClear (obj, args, context) {\n    const db = low(PERSISTED_HISTORY_FILE);\n    db.set({ history: [] }).write();\n\n    fs.writeFileAsync(PERSISTED_HISTORY_FILE, '{\\n  \"history\": [] \\n}');\n    return [];\n  },\n\n  idePersistedHistorySave (obj, args, context) {\n    const db = low(PERSISTED_HISTORY_FILE);\n\n    db.defaults({ history: [] }).write();\n    db.get('history').push(args).write();\n  }\n};\n"]}