{"version":3,"sources":["../../../../../src/modules/ide/ide-persisted/resolver/resolverQuery-ide-persisted.js"],"names":["fs","promisifyAll","require","mkdir","ls","error","idePersistedFindAll","obj","args","context","console","log","resolve","readdirAsync","files","length","all","map","file","readFileAsync","content","contentParse","JSON","parse","results","stringify","queries"],"mappings":"AAAA;;;;;;;;AACA;;;;AACA;;;;AAEA;;;;;;AADA,IAAMA,KAAK,mBAASC,YAAT,CAAsBC,QAAQ,IAAR,CAAtB,CAAX;IAEQC,K,qBAAAA,K;IAAOC,E,qBAAAA,E;IAAIC,K,qBAAAA,K;kBAEJ;AACbC;AAAA,yDAAqB,kBAAOC,GAAP,EAAYC,IAAZ,EAAkBC,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEjBL;;AAFiB,mBAGbC,OAHa;AAAA;AAAA;AAAA;;AAIfF;AACAO,sBAAQC,GAAR,CAAY,2BAAZ;AALe,gDAMR,mBAASC,OAAT,CAAiB,EAAjB,CANQ;;AAAA;AAAA;AAAA,qBAQKZ,GAAGa,YAAH,gCARL;;AAAA;AAQTC,mBARS;;AAAA,oBAWbA,MAAMC,MAAN,GAAe,CAXF;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAYH,mBAASC,GAAT,CACJF,MAAMG,GAAN;AAAA,sEAAU,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAEgBlB,GAAGmB,aAAH,wCACMD,IADN,EAEpB,MAFoB,CAFhB;;AAAA;AAEAE,iCAFA;AAOAC,sCAPA,GAOeC,KAAKC,KAAL,CAAWH,OAAX,CAPf;AAAA,2DAQCC,aAAaG,OAAb,gBAEAH,YAFA;AAGHG,qCAASF,KAAKG,SAAL,CAAeJ,aAAaG,OAA5B;AAHN,+BAKHH,YAbE;;AAAA;AAAA;AAAA;;AAeNX,kCAAQC,GAAR;;AAfM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAV;;AAAA;AAAA;AAAA;AAAA,kBADI,CAZG;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,6BAgCT,mBAASC,OAAT,CAAiB,EAAjB,CAhCS;;AAAA;AAUTc,qBAVS;AAAA,gDAiCRA,OAjCQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAAA;AAAA;AAAA;AAAA;AADa,C","file":"resolverQuery-ide-persisted.js","sourcesContent":["'use strict';\nimport Bluebird from 'bluebird';\nimport shell from 'shelljs';\nconst fs = Bluebird.promisifyAll(require('fs'));\nimport { PERSISTED_DIRECTORY } from '../../../constants';\nconst { mkdir, ls, error } = shell;\n\nexport default {\n  idePersistedFindAll: async (obj, args, context) => {\n    try {\n      ls(PERSISTED_DIRECTORY);\n      if (error()) {\n        mkdir(PERSISTED_DIRECTORY);\n        console.log('Created queries directory');\n        return Bluebird.resolve([]);\n      } else {\n        const files = await fs.readdirAsync(PERSISTED_DIRECTORY);\n\n        const queries =\n          files.length > 0\n            ? await Bluebird.all(\n                files.map(async file => {\n                  try {\n                    const content = await fs.readFileAsync(\n                      `${PERSISTED_DIRECTORY}/${file}`,\n                      'utf8'\n                    );\n\n                    const contentParse = JSON.parse(content);\n                    return contentParse.results\n                      ? {\n                        ...contentParse,\n                        results: JSON.stringify(contentParse.results)\n                      }\n                      : contentParse;\n                  } catch (error) {\n                    console.log(error);\n                  }\n                })\n              )\n            : Bluebird.resolve([]);\n        return queries;\n      }\n    } catch (error) {\n      return error;\n    }\n  }\n};\n"]}