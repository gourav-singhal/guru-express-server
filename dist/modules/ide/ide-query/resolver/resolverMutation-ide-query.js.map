{"version":3,"sources":["../../../../../src/modules/ide/ide-query/resolver/resolverMutation-ide-query.js"],"names":["rm","fs","promisifyAll","require","ideQueryCollectionClear","obj","args","context","ideQueryCreate","data","created","Date","toISOString","writeFileAsync","id","JSON","stringify","then","RESULTS_","result","catch","console","log","error","type","message","ideQueryRemove","ideQueryHistoryClear","db","set","history","write","ideQueryHistorySave","defaults","get","push"],"mappings":"AAAA;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;IAEQA,E,qBAAAA,E;;AACR,IAAMC,KAAK,mBAASC,YAAT,CAAsBC,QAAQ,IAAR,CAAtB,CAAX;;kBAEe;AACbC,yBADa,mCACYC,GADZ,EACiBC,IADjB,EACuBC,OADvB,EACgC;AAC3CP,OAAG,IAAH;AACD,GAHY;AAKbQ,gBALa,0BAKGH,GALH,EAKQC,IALR,EAKcC,OALd,EAKuB;AAClC,QAAME,oBACDH,IADC;AAEJI,eAAS,IAAIC,IAAJ,GAAWC,WAAX;AAFL,MAAN;;AAKA,WAAOX,GACJY,cADI,oCAEmBP,KAAKQ,EAFxB,kBAGHC,KAAKC,SAAL,CAAeP,IAAf,CAHG,EAKJQ,IALI,CAKC,YAAM;AACV,aAAO;AACLC,kBAAU;AACRC,kBAAQ;AADA;AADL,OAAP;AAKD,KAXI,EAYJC,KAZI,CAYE,iBAAS;AACdC,cAAQC,GAAR,CAAYC,KAAZ;;AAEA,aAAO;AACLL,kBAAU;AACRC,kBAAQ,IADA;AAERI,iBAAO;AACLC,kBAAM,kBADD;AAELC,qBAAS;AAFJ;AAFC;AADL,OAAP;AASD,KAxBI,CAAP;AAyBD,GApCY;AAsCbC,gBAtCa,0BAsCGrB,GAtCH,EAsCQC,IAtCR,EAsCcC,OAtCd,EAsCuB,CAAE,CAtCzB;AAwCboB,sBAxCa,gCAwCStB,GAxCT,EAwCcC,IAxCd,EAwCoBC,OAxCpB,EAwC6B;AACxC,QAAMqB,KAAK,mDAAX;AACAA,OAAGC,GAAH,CAAO,EAAEC,SAAS,EAAX,EAAP,EAAwBC,KAAxB;;AAEA9B,OAAGY,cAAH,gCAAsC,wBAAtC;AACA,WAAO,EAAP;AACD,GA9CY;AAgDbmB,qBAhDa,+BAgDQ3B,GAhDR,EAgDaC,IAhDb,EAgDmBC,OAhDnB,EAgD4B;AACvC,QAAMqB,KAAK,mDAAX;;AAEAA,OAAGK,QAAH,CAAY,EAAEH,SAAS,EAAX,EAAZ,EAA6BC,KAA7B;AACAH,OAAGM,GAAH,CAAO,SAAP,EAAkBC,IAAlB,CAAuB7B,IAAvB,EAA6ByB,KAA7B;AACD;AArDY,C","file":"resolverMutation-ide-query.js","sourcesContent":["'use strict';\n\nimport Bluebird from 'bluebird';\nimport shell from 'shelljs';\nimport low from 'lowdb';\nimport { QUERY_DIRECTORY, QUERY_HISTORY_FILE } from '../../../constants';\n\nconst { rm } = shell;\nconst fs = Bluebird.promisifyAll(require('fs'));\n\nexport default {\n  ideQueryCollectionClear (obj, args, context) {\n    rm('-r', QUERY_DIRECTORY);\n  },\n\n  ideQueryCreate (obj, args, context) {\n    const data = {\n      ...args,\n      created: new Date().toISOString()\n    };\n\n    return fs\n      .writeFileAsync(\n        `${QUERY_DIRECTORY}/${args.id}-query.json`,\n        JSON.stringify(data)\n      )\n      .then(() => {\n        return {\n          RESULTS_: {\n            result: 'ok'\n          }\n        };\n      })\n      .catch(error => {\n        console.log(error);\n\n        return {\n          RESULTS_: {\n            result: 'ok',\n            error: {\n              type: 'QUERY_SAVE_ERROR',\n              message: 'Query did not save'\n            }\n          }\n        };\n      });\n  },\n\n  ideQueryRemove (obj, args, context) {},\n\n  ideQueryHistoryClear (obj, args, context) {\n    const db = low(QUERY_HISTORY_FILE);\n    db.set({ history: [] }).write();\n\n    fs.writeFileAsync(QUERY_HISTORY_FILE, '{\\n  \"history\": [] \\n}');\n    return [];\n  },\n\n  ideQueryHistorySave (obj, args, context) {\n    const db = low(QUERY_HISTORY_FILE);\n\n    db.defaults({ history: [] }).write();\n    db.get('history').push(args).write();\n  }\n};\n"]}