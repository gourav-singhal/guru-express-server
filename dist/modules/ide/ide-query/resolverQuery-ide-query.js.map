{"version":3,"sources":["../../../../src/modules/ide/ide-query/resolverQuery-ide-query.js"],"names":["fs","promisifyAll","require","queriesPath","process","cwd","ideQueryFindAll","obj","args","context","readdirAsync","files","length","all","map","file","readFileAsync","content","contentParse","JSON","parse","results","stringify","console","log","resolve","queries"],"mappings":"AAAA;;;;;;;;AACA;;;;;;;;AACA,IAAMA,KAAK,mBAASC,YAAT,CAAsBC,QAAQ,IAAR,CAAtB,CAAX;AACA,IAAMC,cAAiBC,QAAQC,GAAR,EAAjB,oBAAN;;kBAGe;AACbC;AAAA,yDAAiB,kBAAOC,GAAP,EAAYC,IAAZ,EAAkBC,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEOT,GAAGU,YAAH,CAAgBP,WAAhB,CAFP;;AAAA;AAEPQ,mBAFO;;AAAA,oBAIGA,MAAMC,MAAN,GAAe,CAJlB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAKH,mBAASC,GAAT,CAAaF,MAAMG,GAAN;AAAA,sEAAU,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAELf,GAAGgB,aAAH,CAAoBb,WAApB,SAAmCY,IAAnC,EAA2C,MAA3C,CAFK;;AAAA;AAErBE,iCAFqB;AAGrBC,sCAHqB,GAGNC,KAAKC,KAAL,CAAWH,OAAX,CAHM;AAAA,2DAKpBC,aAAaG,OAAb,gBACEH,YADF,IACgBG,SAASF,KAAKG,SAAL,CAAeJ,aAAaG,OAA5B,CADzB,MAEHH,YAPuB;;AAAA;AAAA;AAAA;;AAU3BK,kCAAQC,GAAR;;AAV2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAV;;AAAA;AAAA;AAAA;AAAA,kBAAb,CALG;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,6BAkBT,mBAASC,OAAT,CAAiB,EAAjB,CAlBS;;AAAA;AAIPC,qBAJO;AAAA,gDAmBNA,OAnBM;;AAAA;AAAA;AAAA;;AAsBbH,sBAAQC,GAAR;AAtBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA;AAAA;AAAA;AAAA;AADa,C","file":"resolverQuery-ide-query.js","sourcesContent":["'use strict';\nimport Bluebird from 'bluebird';\nconst fs = Bluebird.promisifyAll(require('fs'));\nconst queriesPath = `${process.cwd()}/server/queries`;\n\n\nexport default {\n  ideQueryFindAll: async (obj, args, context) => {\n    try {\n      const files = await fs.readdirAsync(queriesPath);\n      \n      const queries = files.length > 0\n        ? await Bluebird.all(files.map(async file => {\n          try {\n            const content = await fs.readFileAsync(`${queriesPath}/${file}`, 'utf8');\n            const contentParse = JSON.parse(content);\n\n            return contentParse.results\n              ? { ...contentParse, results: JSON.stringify(contentParse.results) }\n              : contentParse;\n\n          } catch (error) {\n            console.log(error);\n          }\n        }))\n        : Bluebird.resolve([]);\n      return queries;\n\n    } catch (error) {\n      console.log(error);\n      return error;\n    }\n    \n  }\n};\n\n"]}