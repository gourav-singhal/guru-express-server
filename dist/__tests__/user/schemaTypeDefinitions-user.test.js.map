{"version":3,"sources":["../../../src/__tests__/user/schemaTypeDefinitions-user.test.js"],"names":["test","require","utils","readModuleFile","t","actual","expect","trim","is"],"mappings":";;;;AAAA,IAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,IAAMC,QAAQD,QAAQ,mBAAR,CAAd;;AAGA,IAAME,iBAAiBD,MAAMC,cAA7B;;AAGAH,KAAK,qCAAL;AAAA,uDAA4C,iBAAOI,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACrBD,eAAe,gDAAf,CADqB;;AAAA;AACpCE,kBADoC;AAGpCC,kBAHoC,GAG3B,qeAwBdC,IAxBc,EAH2B;;;AA6B1CH,cAAEI,EAAF,CAAKH,MAAL,EAAaC,MAAb;;AA7B0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5C;;AAAA;AAAA;AAAA;AAAA","file":"schemaTypeDefinitions-user.test.js","sourcesContent":["const test = require('ava');\nconst utils = require('../../utils/utils');\n\n\nconst readModuleFile = utils.readModuleFile;\n\n\ntest('Has correct user schema definitions', async (t) => {\n  const actual = await readModuleFile('user/schemas/schemaTypeDefinition-user.graphql');\n\n  const expect = `\ninput InputUser {\n  id: String\n}\n\ntype User {\n  id         : String,\n  created    : String,\n  createdBy  : User,\n  email      : String,\n  endDate    : String,\n  firstName  : String,\n  lastLogin  : String,\n  lastName   : String,\n  online     : Boolean,\n  roles      : [String],\n  skype      : String,\n  startDate  : String,\n  team       : Team,\n  telephone  : String,\n  updated    : String,\n  updatedBy  : User,\n  username   : String,\n  _result_   : String\n}`.trim();\n\n  t.is(actual, expect);\n});\n"]}