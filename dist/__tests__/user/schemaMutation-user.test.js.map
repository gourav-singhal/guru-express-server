{"version":3,"sources":["../../../src/__tests__/user/schemaMutation-user.test.js"],"names":["test","require","utils","readModuleFile","t","actual","expect","trim","is"],"mappings":";;;;AAAA,IAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,IAAMC,QAAQD,QAAQ,mBAAR,CAAd;;AAEA,IAAME,iBAAiBD,MAAMC,cAA7B;;AAGAH,KAAK,mCAAL;AAAA,uDAA0C,iBAAOI,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACnBD,eAAe,sCAAf,CADmB;;AAAA;AAClCE,kBADkC;AAGlCC,kBAHkC,GAGzB,0nBA+BRC,IA/BQ,EAHyB;;;AAoCxCH,cAAEI,EAAF,CAAKH,MAAL,EAAaC,MAAb;;AApCwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1C;;AAAA;AAAA;AAAA;AAAA","file":"schemaMutation-user.test.js","sourcesContent":["const test = require('ava');\nconst utils = require('../../utils/utils');\n\nconst readModuleFile = utils.readModuleFile;\n\n\ntest('Has correct user schema mutations', async (t) => {\n  const actual = await readModuleFile('user/schemas/schemaMutation-user.gql');\n\n  const expect = `\nuserCreate (\n  id         : String,\n  email      : String,\n  endDate    : String,\n  firstName  : String,\n  lastLogin  : String,\n  lastName   : String,\n  roles      : [String],\n  startDate  : String,\n  telephone  : String,\n  team       : InputTeam,\n  username   : String\n): User\n\nuserUpdate (\n  id         : String,\n  email      : String,\n  endDate    : String,\n  firstName  : String,\n  lastLogin  : String,\n  lastName   : String,\n  roles      : [String],\n  startDate  : String,\n  team       : InputTeam\n  telephone  : String,\n  username   : String\n): User\n\nuserRemove (\n  id         : String\n): User`.trim();\n\n  t.is(actual, expect);\n});\n"]}