{"version":3,"sources":["../../../src/__tests__/user/schemaQuery-user.test.js"],"names":["test","require","utils","readModuleFile","t","actual","expect","trim","is"],"mappings":";;;;AAAA,IAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,IAAMC,QAAQD,QAAQ,mBAAR,CAAd;;AAEA,IAAME,iBAAiBD,MAAMC,cAA7B;;AAGAH,KAAK,iCAAL;AAAA,uDAAwC,iBAAOI,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACjBD,eAAe,mCAAf,CADiB;;AAAA;AAChCE,kBADgC;AAGhCC,kBAHgC,GAGvB,gjCAyDfC,IAzDe,EAHuB;;;AA8DtCH,cAAEI,EAAF,CAAKH,MAAL,EAAaC,MAAb;;AA9DsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxC;;AAAA;AAAA;AAAA;AAAA","file":"schemaQuery-user.test.js","sourcesContent":["const test = require('ava');\nconst utils = require('../../utils/utils');\n\nconst readModuleFile = utils.readModuleFile;\n\n\ntest('Has correct user schema queries', async (t) => {\n  const actual = await readModuleFile('user/schemas/schemaQuery-user.gql');\n\n  const expect = `\nuserFindAll (\n  id:          String, \n  created:     String,\n  createdBy:   InputUser,\n  dateOfBirth: String,\n  email:       String,\n  endDate:     String,\n  firstName:   String,\n  lastLogin:   String,\n  lastName:    String,\n  online:      Boolean,\n  roles:       String,\n  startDate:   String,\n  team:        InputTeam,\n  telephone:   String,\n  updated:     String,\n  updatedBy:   InputUser,\n  username:    String\n): [User]\n\n\nuserFindById (\n  id: String\n): User\n\n\nuserFindByUsername (\n  username: String\n): User\n\n\nuserFindIdByUsername (\n  username: String\n): User\n\n\nuserFindByFilter (\n  id         : String,\n  created    : String,\n  createdBy  : String,\n  dateOfBirth: String,\n  email      : String,\n  endDate    : String,\n  firstName  : String,\n  lastLogin  : String,\n  lastName   : String,\n  notes      : String,\n  online     : Boolean,\n  roles      : String,\n  skype      : String,\n  team       : String,\n  telephone  : String,\n  updated    : String,\n  updatedBy  : String,\n  username   : String\n) : [User]\n`.trim();\n\n  t.is(actual, expect);\n});\n"]}