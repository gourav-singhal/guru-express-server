{"version":3,"sources":["../../../src/__tests__/user/resolver-user.test.js"],"names":["test","require","resolverMutations","resolverQueries","actual","Object","getOwnPropertyNames","prototype","filter","c","sort","expect","t","deepEqual","mutations","queries","m","Set","false","has"],"mappings":";;;;AAAA,IAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,IAAMC,oBAAoBD,QAAQ,oDAAR,CAA1B;AACA,IAAME,kBAAkBF,QAAQ,oDAAR,CAAxB;;AAGAD,KAAK,kDAAL,EAAyD,aAAK;AAC5D,MAAMI,SAASC,OAAOC,mBAAP,CAA2BJ,kBAAkBK,SAA7C,EACZC,MADY,CACL;AAAA,WAAKC,MAAM,aAAX;AAAA,GADK,EAEZC,IAFY,EAAf;;AAIA,MAAMC,SAAS,CACb,QADa,EAEb,QAFa,EAGb,QAHa,CAAf;AAKAC,IAAEC,SAAF,CAAYT,MAAZ,EAAoBO,MAApB;AACD,CAXD;;AAcAX,KAAK,gDAAL,EAAuD,aAAK;AAC1D,MAAMI,SAASC,OAAOC,mBAAP,CAA2BH,gBAAgBI,SAA3C,EACZC,MADY,CACL;AAAA,WAAKC,MAAM,aAAX;AAAA,GADK,EAEZC,IAFY,EAAf;;AAIA,MAAMC,SAAS,CACb,SADa,EAEb,UAFa,CAAf;AAIAC,IAAEC,SAAF,CAAYT,MAAZ,EAAoBO,MAApB;AACD,CAVD;;AAaAX,KAAK,yEAAL,EAAgF,aAAK;AACnF,MAAMc,YAAYT,OAAOC,mBAAP,CAA2BJ,kBAAkBK,SAA7C,EACfC,MADe,CACR;AAAA,WAAKC,MAAM,aAAX;AAAA,GADQ,EAEfC,IAFe,EAAlB;;AAIA,MAAMK,UAAUV,OAAOC,mBAAP,CAA2BH,gBAAgBI,SAA3C,EACbC,MADa,CACN;AAAA,WAAKC,MAAM,aAAX;AAAA,GADM,EAEbC,IAFa,EAAhB;;AAIA,MAAMM,IAAI,IAAIC,GAAJ,CAAQH,SAAR,CAAV;;AAEAF,IAAEM,KAAF,CAAQF,EAAEG,GAAF,6BAASJ,OAAT,EAAR;AACD,CAZD","file":"resolver-user.test.js","sourcesContent":["const test = require('ava');\nconst resolverMutations = require('../../modules/user/resolvers/resolverMutation-user');\nconst resolverQueries = require('../../modules/user/resolvers/resolverQuery-user.js');\n\n\ntest('User resolver mutations has correct method names', t => {\n  const actual = Object.getOwnPropertyNames(resolverMutations.prototype)\n    .filter(c => c !== 'constructor')\n    .sort();\n    \n  const expect = [\n    'create',\n    'remove',\n    'update'\n  ];\n  t.deepEqual(actual, expect);\n});\n\n\ntest('User resolver queries has correct method names', t => {\n  const actual = Object.getOwnPropertyNames(resolverQueries.prototype)\n    .filter(c => c !== 'constructor')\n    .sort();\n    \n  const expect = [\n    'findAll',\n    'findById'\n  ];\n  t.deepEqual(actual, expect);\n});\n\n\ntest('User resolver mutations and queries do not share duplicate method names', t => {\n  const mutations = Object.getOwnPropertyNames(resolverMutations.prototype)\n    .filter(c => c !== 'constructor')\n    .sort();\n  \n  const queries = Object.getOwnPropertyNames(resolverQueries.prototype)\n    .filter(c => c !== 'constructor')\n    .sort();\n    \n  const m = new Set(mutations);\n\n  t.false(m.has(...queries));\n});\n\n"]}