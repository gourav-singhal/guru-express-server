{"version":3,"sources":["../src/utils.js"],"names":["cleanObj","capitalize","firstCharUpperCase","str","charAt","toUpperCase","substr","length","obj","Object","keys","forEach","key","undefined","pipeAsync","initialValue","reduce","sequence","previous","current","process","stdout","write","catch","error"],"mappings":";;;;;;;;;kBAOwBA,Q;;AAPxB;;;;;;;;AAEO,IAAMC,kCAAa,SAAbA,UAAa,MAAO;AAC/B,MAAMC,qBAAqBC,IAAIC,MAAJ,CAAW,CAAX,EAAcC,WAAd,EAA3B;AACA,cAAUH,kBAAV,GAA+BC,IAAIG,MAAJ,CAAW,CAAX,EAAcH,IAAII,MAAJ,GAAa,CAA3B,CAA/B;AACD,CAHM;;AAKQ,SAASP,QAAT,CAAmBQ,GAAnB,EAAwB;AACrCC,SAAOC,IAAP,CAAYF,GAAZ,EAAiBG,OAAjB,CACE;AAAA,WACGH,IAAII,GAAJ,KAAY,QAAOJ,IAAII,GAAJ,CAAP,MAAoB,QAAhC,IAA4CZ,SAASQ,IAAII,GAAJ,CAAT,CAA7C,IACC,CAACJ,IAAII,GAAJ,MAAaC,SAAb,IAA0BL,IAAII,GAAJ,MAAa,IAAxC,KAAiD,OAAOJ,IAAII,GAAJ,CAF3D;AAAA,GADF;AAKA,SAAOJ,GAAP;AACD;;AAEM,IAAMM,gCAAY,SAAZA,SAAY;AAAA;AAAA,yDAAY,kBAAMC,YAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEpB,mBAASC,MAAT,CACXC,QADW;AAAA,sEAEX,iBAAOC,QAAP,EAAiBC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAEiBA,QAAQD,QAAR,CAFjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAIIE,kCAAQC,MAAR,CAAeC,KAAf;;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFW;;AAAA;AAAA;AAAA;AAAA,mBASXP,YATW,EAUXQ,KAVW,CAUL;AAAA,uBAASH,QAAQC,MAAR,CAAeC,KAAf,CAAqBE,KAArB,CAAT;AAAA,eAVK,CAFoB;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAcjCJ,sBAAQC,MAAR,CAAeC,KAAf;;AAdiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB","file":"utils.js","sourcesContent":["import Bluebird from 'bluebird';\n\nexport const capitalize = str => {\n  const firstCharUpperCase = str.charAt(0).toUpperCase();\n  return `${firstCharUpperCase}${str.substr(1, str.length - 1)}`;\n};\n\nexport default function cleanObj (obj) {\n  Object.keys(obj).forEach(\n    key =>\n      (obj[key] && typeof obj[key] === 'object' && cleanObj(obj[key])) ||\n      ((obj[key] === undefined || obj[key] === null) && delete obj[key])\n  );\n  return obj;\n}\n\nexport const pipeAsync = sequence => async initialValue => {\n  try {\n    return await Bluebird.reduce(\n      sequence,\n      async (previous, current) => {\n        try {\n          return await current(previous);\n        } catch (error) {\n          process.stdout.write(error);\n        }\n      },\n      initialValue\n    ).catch(error => process.stdout.write(error));\n  } catch (error) {\n    process.stdout.write(error);\n  }\n};\n"]}